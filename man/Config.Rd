% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Config.R
\name{Config}
\alias{Config}
\title{Config.R}
\description{
Config.R

Config.R
}
\details{
Class for manging the library configuration options. Creates the default
configuration without any source file, populates partial or missing config
elements, stores the config file to local machine, and provides easy access
methods for setting and getting config values.
}
\examples{

# Creates the configuration instance. Checks automatically if there is
# a previously stored configuration json file available for usage.

config <- Config$new()

# Getting and setting configuration values

value <- config$get("rtf.mode")
config$set("rtf.mode", "raw")

# Saving the current configuration to local machine

config$save()

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{config}}{local property for storing the current configuration data}

\item{\code{schema}}{local property for storing the configuration schema}

\item{\code{config_path}}{local property for storing the stored configuration json file path}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Config-new}{\code{Config$new()}}
\item \href{#method-Config-get}{\code{Config$get()}}
\item \href{#method-Config-set}{\code{Config$set()}}
\item \href{#method-Config-save}{\code{Config$save()}}
\item \href{#method-Config-get_default_config}{\code{Config$get_default_config()}}
\item \href{#method-Config-get_default_schema}{\code{Config$get_default_schema()}}
\item \href{#method-Config-clone}{\code{Config$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-new"></a>}}
\if{latex}{\out{\hypertarget{method-Config-new}{}}}
\subsection{Method \code{new()}}{
Constructor for initializing the configuration. Checks the local machine
for existing configuration file is load_config = TRUE. Ensures that all
the project configuration values are included.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$new(load_config = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{load_config}}{load configuration from local machine if available}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-get"></a>}}
\if{latex}{\out{\hypertarget{method-Config-get}{}}}
\subsection{Method \code{get()}}{
Mehod for getting configuration value based on configuration key. Configuration
item children are separated with a dot in the key notation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$get(key)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{configuration property key for which to get the value}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-set"></a>}}
\if{latex}{\out{\hypertarget{method-Config-set}{}}}
\subsection{Method \code{set()}}{
Mehod for setting configuration value based on configuration key. Configuration
item children are separated with a dot in the key notation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$set(key, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{configuration property key for which to get the value}

\item{\code{value}}{value to set for the specified configuration key}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-save"></a>}}
\if{latex}{\out{\hypertarget{method-Config-save}{}}}
\subsection{Method \code{save()}}{
Method for saving the current configuration data into local machine. The
save location and file name is currently hard coded.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$save()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-get_default_config"></a>}}
\if{latex}{\out{\hypertarget{method-Config-get_default_config}{}}}
\subsection{Method \code{get_default_config()}}{
Helper method for getting configuration default values. These default values
will be used in the configuration in case the configuration properties are not
present previously.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$get_default_config()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-get_default_schema"></a>}}
\if{latex}{\out{\hypertarget{method-Config-get_default_schema}{}}}
\subsection{Method \code{get_default_schema()}}{
Method for getting the full configuration schema. Apart from the configuration
data, the schema contains property descriptions as well as all possible values
for the configuration properties.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$get_default_schema()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Config-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Config-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Config$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
