name: R Package CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check:
    name: R CMD check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: my-r-package-ci:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: List Docker images (debug)
        run: docker images

      - name: Run devtools::check
        run: |
          docker run --rm -v ${{ github.workspace }}:/workdir my-r-package-ci \
          Rscript -e "devtools::check('/workdir', error_on = 'warning')"

      - name: Show the event that triggered the workflow
        run: |
          echo "Triggered by event: ${{ github.event_name }}"

  coverage:
    name: Test coverage
    runs-on: ubuntu-latest
    needs: check

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: my-r-package-ci:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: List Docker images (debug)
        run: docker images

      - name: Run coverage and save output
        run: |
          mkdir -p coverage-report .github/badges
          docker run --rm -v ${{ github.workspace }}:/workdir my-r-package-ci \
          Rscript -e "cov <- covr::package_coverage('/workdir'); \
                     cat(round(covr::percent_coverage(cov), 1), file = 'coverage.txt'); \
                     covr::report(cov, file = '/workdir/coverage-report/index.html')"

          echo "Generated coverage.txt:"
          cat coverage.txt

      - name: Create SVG badge manually
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          coverage=$(cat coverage.txt)
          cat <<EOF > .github/badges/coverage.svg
          <svg xmlns="http://www.w3.org/2000/svg" width="110" height="20">
            <linearGradient id="a" x2="0" y2="100%">
              <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
              <stop offset="1" stop-opacity=".1"/>
            </linearGradient>
            <rect rx="3" width="110" height="20" fill="#555"/>
            <rect rx="3" x="55" width="55" height="20" fill="#007ec6"/>
            <path fill="#007ec6" d="M55 0h4v20h-4z"/>
            <rect rx="3" width="110" height="20" fill="url(#a)"/>
            <g fill="#fff" text-anchor="middle" font-family="Verdana" font-size="11">
              <text x="27.5" y="15" fill="#010101" fill-opacity=".3">coverage</text>
              <text x="27.5" y="14">coverage</text>
              <text x="82.5" y="15" fill="#010101" fill-opacity=".3">\${coverage}%</text>
              <text x="82.5" y="14">\${coverage}%</text>
            </g>
          </svg>
          EOF

      - name: Deploy to gh-pages branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          git clone --branch gh-pages --single-branch https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }} gh-pages

          rm -rf gh-pages/coverage
          mkdir -p gh-pages/coverage
          cp -r coverage-report/* gh-pages/coverage/

          cd gh-pages
          git add coverage
          git commit -m "Update coverage report [skip ci]" || echo "No changes to commit"
          git push origin gh-pages
